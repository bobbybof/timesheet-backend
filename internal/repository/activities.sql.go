// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: activities.sql

package repository

import (
	"context"
	"time"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities (
    name,
    date_start,
    date_end,
    project_id,
    user_id
) VALUES ($1,$2,$3,$4,$5)
RETURNING id, name, date_start, date_end, project_id, user_id
`

type CreateActivityParams struct {
	Name      string    `json:"name"`
	DateStart time.Time `json:"date_start"`
	DateEnd   time.Time `json:"date_end"`
	ProjectID int32     `json:"project_id"`
	UserID    int32     `json:"user_id"`
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.Name,
		arg.DateStart,
		arg.DateEnd,
		arg.ProjectID,
		arg.UserID,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DateStart,
		&i.DateEnd,
		&i.ProjectID,
		&i.UserID,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
DELETE FROM activities
WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const updateActivity = `-- name: UpdateActivity :one
UPDATE activities
SET 
    name = $1,
    date_start = $2,
    date_end = $3,
    project_id = $4
WHERE 
    id = $5
RETURNING id, name, date_start, date_end, project_id, user_id
`

type UpdateActivityParams struct {
	Name      string    `json:"name"`
	DateStart time.Time `json:"date_start"`
	DateEnd   time.Time `json:"date_end"`
	ProjectID int32     `json:"project_id"`
	ID        int32     `json:"id"`
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, updateActivity,
		arg.Name,
		arg.DateStart,
		arg.DateEnd,
		arg.ProjectID,
		arg.ID,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DateStart,
		&i.DateEnd,
		&i.ProjectID,
		&i.UserID,
	)
	return i, err
}
